datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model Tournament {
  id        Int      @id @default(autoincrement())
  name     String
  venue      String?
  logoURL String?
  matches Match[]
  teams Team[]
  startDate DateTime
  endDate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id        Int      @id @default(autoincrement())
  name     String
  color String?
  color2 String?
  flagURL String?
  players      Player[]
  matches TeamsInMatch[]
  tournaments Tournament[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Player {
  id        Int      @id @default(autoincrement())
  name     String
  position      String
  team      Team?     @relation(fields: [teamId], references: [id])
  teamId    Int?
  scoredForTeamInMatch TeamsInMatch[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Match {
  id        Int      @id @default(autoincrement())
  location     String
  matchDate      DateTime
  round String
  tournament      Tournament     @relation(fields: [tournamentId], references: [id])
  tournamentId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teams TeamsInMatch[]
  maxWagerLimit Int
  predictions MatchPrediction[]
}

model TeamsInMatch {
  id        Int     @id @default(autoincrement())
  matchId     Int
  match       Match     @relation(fields: [matchId], references: [id])
  teamId Int
  team   Team @relation(fields: [teamId], references: [id])
  score Int?
  scoringPlayers Player[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([matchId, teamId])
}

model User {
  id        Int      @id @default(autoincrement())
  username String?
  email     String @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  points Int?
  predictions MatchPrediction[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roles     String @default("Gamer")
}

model MatchPrediction {
  id        Int      @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id])
  matchId Int
  match Match @relation(fields: [matchId], references: [id])
  predictedScoreOfTeam1 Int @default(0)
  predictedScoreOfTeam2 Int @default(0)
  predictedScoringPlayersOfTeam1 Int[]
  predictedScoringPlayersOfTeam2 Int[]
  wageredPoints Int @default(10)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}