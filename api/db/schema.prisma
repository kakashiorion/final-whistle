datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model Tournament {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  venue     String?
  logoURL   String?
  matches   Match[]
  teams     Team[]
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  color       String?
  flagURL     String?
  players     Player[]
  homeMatches Match[]      @relation("HomeTeam")
  awayMatches Match[]      @relation("AwayTeam")
  tournaments Tournament[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Player {
  id        Int            @id @default(autoincrement())
  name      String         @unique
  position  PlayerPosition
  team      Team           @relation(fields: [teamId], references: [id])
  teamId    Int
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

enum PlayerPosition {
  GK
  DF
  MD
  FW
}

model Match {
  id                 Int               @id @default(autoincrement())
  location           String
  matchDate          DateTime
  round              String?
  tournament         Tournament        @relation(fields: [tournamentId], references: [id])
  tournamentId       Int
  homeTeam           Team              @relation("HomeTeam", fields: [homeTeamId], references: [id])
  homeTeamId         Int
  awayTeam           Team              @relation("AwayTeam", fields: [awayTeamId], references: [id])
  awayTeamId         Int
  homeScore          Int?
  awayScore          Int?
  homeScoringPlayers Int[]
  awayScoringPlayers Int[]
  maxWagerLimit      Int
  predictions        MatchPrediction[]
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
}

model User {
  id                  Int               @id @default(autoincrement())
  username            String?           @unique
  email               String            @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  coins               Int?
  points              Int?
  predictions         MatchPrediction[]
  roles               String            @default("Gamer")
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

model MatchPrediction {
  id                                Int      @id @default(autoincrement())
  userId                            Int
  user                              User     @relation(fields: [userId], references: [id])
  matchId                           Int
  match                             Match    @relation(fields: [matchId], references: [id])
  predictedScoreOfHomeTeam          Int      @default(0)
  predictedScoreOfAwayTeam          Int      @default(0)
  predictedScoringPlayersOfHomeTeam Int[]
  predictedScoringPlayersOfAwayTeam Int[]
  wageredCoins                      Int      @default(10)
  scorelineMultiplier               Int?
  goalScorerMultiplier              Int?
  earnedPoints                      Int?
  createdAt                         DateTime @default(now())
  updatedAt                         DateTime @updatedAt
}
